@page "/supports"

@using TrayReportApp.Components.Pages.Dialogs
@using TrayReportApp.Services.Contracts
@using TrayReportApp.Services.Models

@inject ISupportService SupportService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Supports</PageTitle>

<h1>Supports</h1>

<MudGrid Spacing="3" Justify="Justify.Center">
    <MudItem>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.AddCircle" DropShadow="false" OnClick="@(() => AddSupportAsync())">Create New Support</MudButton>
    </MudItem>
</MudGrid>

<MudPaper Elevation="0" Class="pa-4">
    <MudDataGrid T="SupportServiceModel" Items="@Elements" ReadOnly="false" Bordered="true" Dense="true" Hover="true" Striped="true"
                 EditMode="DataGridEditMode.Cell" EditTrigger="DataGridEditTrigger.OnRowClick" CommittedItemChanges="@ItemHasBeenCommitted" Filterable="true" FilterMode="DataGridFilterMode.Simple" FilterCaseSensitivity="DataGridFilterCaseSensitivity.Ignore">
        <Columns>
            <PropertyColumn Property="x => x.Name" Title="Name" />
            <PropertyColumn Property="x => x.Weight" Title="Weight [kg]" />
            <PropertyColumn Property="x => x.Distance" Title="Distance [m]" />
            <TemplateColumn Title="Actions" Editable="false">
                <CellTemplate>
                    <MudTooltip Text="Delete">
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteSupportAsync(context.Item.Id))" />
                    </MudTooltip>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
</MudPaper>

@code{
    private List<SupportServiceModel> Elements { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await ReloadDataAsync();
    }

    private async Task ReloadDataAsync()
    {
        Elements = await SupportService.GetSupportsAsync();
    }

    private async Task AddSupportAsync()
    {
        DialogParameters parameters = new DialogParameters<AddSupportDialog>
        {
            { x => x.Title , "Add new Support!" }
        };

        IDialogReference dialogResult = await DialogService.ShowAsync<AddSupportDialog>("", parameters);
        DialogResult result = await dialogResult.Result;

        if (!result.Canceled)
        {
            await ReloadDataAsync();
        }
    }

    private async Task DeleteSupportAsync(int id)
    {
        DialogParameters parameters = new DialogParameters<DeleteDialog>
        {
            { x => x.Title , "Delete Support?" },
            { x => x.Content, "Are you sure you want to delete this Support?" },
            { x => x.Result, "Support was deleted!" }
        };

        IDialogReference dialogResult = await DialogService.ShowAsync<DeleteDialog>("", parameters);
        DialogResult result = await dialogResult.Result;

        if (!result.Canceled)
        {
            await SupportService.DeleteSupportAsync(id);
            await ReloadDataAsync();
        }
    }

    private async Task ItemHasBeenCommitted(SupportServiceModel item)
    {
        await SupportService.UpdateSupportAsync(item);
        Snackbar.Add("Support was updated!", Severity.Success);
    }
}